
  describe "mne_tos()"
  {
    context "cows are flying"
    {
      it "used to crash when the 1st it had no ensure"
      {
      }
      it "turns longs to mnemonic (hopefully) strings"
      {
      }
      it "flips \"burgers\""
      {
      }
      context "==="
      {
        it "compares strings 1"
        {
        }
        it "compares strings 2"
        {
        }
        it "compares strings 2"
        {
        }
        it "expects strings to differ 1"
        {
        }
        it "expects strings to differ 2"
        {
        }
        it "frees strings 1"
        {
        }
        it "doesn't crash when strings are NULL"
        {
        }
        it "compares to NULL"
        {
        }
        it "compares empty strings"
        {
        }
      }
      context "~=="
      {
        it "matches strings 1"
        {
        }
        it "matches strings 2 (failure)"
        {
        }
        it "matches strings (insensitive)"
        {
        }
        it "understands !~== (hit)"
        {
        }
        it "understands !~== (miss)"
        {
        }
        it "doesn't mind NULL values (miss)"
        {
        }
      }
      context "^=="
      {
        it "starts with (success)"
        {
        }
        it "starts with (failure)"
        {
        }
        it "starts and ends quickly if the result is NULL"
        {
        }
        it "starts with (insensitive)"
        {
        }
        it "understands !^== (hit)"
        {
        }
        it "understands !^== (miss)"
        {
        }
        it "doesn't mind NULL values (miss)"
        {
        }
      }
      context "$=="
      {
        it "ends with (success)"
        {
        }
        it "ends with (failure)"
        {
        }
        it "ends quickly if the result is NULL"
        {
        }
        it "ends with (insensitive)"
        {
        }
        it "understands !$== (hit)"
        {
        }
        it "understands !$== (failure)"
        {
        }
        it "doesn't mind NULL values (miss)"
        {
        }
      }
      context ">=="
      {
        it "accepts >== for 'contains' (hit)"
        {
        }
        it "accepts >== for 'contains' (miss)"
        {
        }
        it "accepts >==i for 'contains, whatever the case'"
        {
        }
        it "accepts !>== for 'does not contain' (hit)"
        {
        }
        it "accepts !>== for 'does not contain' (miss)"
        {
        }
        it "accepts !>==i for 'does not contain, whatever the case'"
        {
        }
        it "doesn't mind NULL values (miss)"
        {
        }
      }
      context "===i"
      {
        it "accepts ===i for case insensitive comparison"
        {
        }
        it "accepts !==i for case insensitive comparison"
        {
        }
      }
      context "typed equals"
      {
        it "succeeds"
        {
        }
        it "fails"
        {
        }
        it "fails 'f'"
        {
        }
        it "fails 'zd'"
        {
        }
      }
      it "accepts empty specs"
      {
      }
    }
  }
  describe "mne_tos()"
  {
    context "birds are flying"
    {
      it "finds the コンビニ convenient"
      {
      }
      it "is OK with \"double quotes\" and \tabs"
      {
      }
      it "does not care about \n"
      {
      }
    }
  }
  describe "mne_toi()"
  {
    it "flips burgers"
    {
    }
  }

